import gh

go_tc := go("go1.20.7")

node_tc := node("v20.5.1")

go_files := fs("go_files", ["go.mod", "go.sum", "**/*.go"])

os.setenv("GOLANGCI_LINT_CACHE", os.getenv("GOPATH")+"/.lint_cache")

register("golangci-lint", [go_tc], func(bc) {
    cmd := 'GOBIN={bc.Out} go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.0'
    sh(cmd)
})

register("go_download", [go_tc, go_files], func(bc){
    sh('go mod download')
})

archive_all := []

func build_go(goos, goarch) {
    name := 'yabs_{goos}_{goarch}'
    bin_name := "yabs"
    if goos == "windows" {
        bin_name += ".exe"
    }
    register(name, [go_files, go_tc, "go_download"], func(bc) {
        goos := goos
        goarch := goarch
        bin_name := bin_name

        sh('GOOS={goos} GOARCH={goarch} go build -o {bc.Out}/{bin_name} -C cmd/yabs')
    })
    ext := ".tar.gz"
    if goos == "windows" {
        ext = ".zip"
    }
    archive_name := name + ext
    archive_all.append(archive_name)
    register(archive_name, [name], func(bc) {
        release_name := name
        archive_name := archive_name
        os.mkdir_all(bc.Out)
        bin := bc.GetDep(release_name)
        bin_name := bin_name

        if ext == ".tar.gz" {
            sh('tar -czvf {bc.Out}/{archive_name} -C {bin} {bin_name}')
        } else {
            sh('cd {bin} && zip {bc.Out}/{archive_name} {bin_name}')
        }
    })
}

for _, goos := range ["windows", "darwin", "linux"] {
    for _, goarch := range ["amd64", "arm64"] {
        build_go(goos, goarch)
    }
}

register("build", [go_files, go_tc, "go_download"], func(bc){
    'go build -o ../../bin/yabs -C cmd/yabs' | sh
})


version := fs("version", ["VERSION"])
go_archives := archive_all.copy()
archive_all.append(version)

register("release", archive_all, func(bc) {
    version := string(os.read_file("VERSION"))
    print("creating release for", version)
    draft := os.getenv("CI") != "true"
    data := gh.create_release(version, false)
    if "message" in data {
        print(data)
        return
    }
    id := data["id"]
    for _, bin := range go_archives {
        path := bc.GetDep(bin)
        print("uploading", bin)
        gh.upload_release_asset(id, bin, os.read_file(path+"/"+bin))
    }
})

register("lint", ["golangci-lint", "go_download", go_tc], func(bc){
    lint_bin := bc.GetDep("golangci-lint") + "/golangci-lint"
    sh('PATH={bc.GetDep(go_tc)} {lint_bin} run ./...')
})

register("test", [go_tc, "go_download", go_files], func(bc) {
    sh('go test ./...')
})

register("npm_install", [node_tc], func(bc){
    arg := "install"
    if os.getenv("CI") == "true" {
        arg = "ci"
    }
    sh("cd docs && npm {arg}")
})

register("docs", ["npm_install"], func(bc) {
    sh('cd docs && npm start')
})

docs_files := fs("docs_files", ["docs/**/*"], ["docs/node_modules/**/*", "docs/.docusaurus/**/*"])

register("docs_build", ["npm_install", docs_files], func(bc){
    sh('cd docs && npm run build')
})

register("node", [node_tc], func(bc) {
    sh('node --version')
    sh('which node')
    sh('npm --version')
    sh('which npm')
})