// use a go toolchain with a specific version, returns the name of the target
go_tc := go("go1.20.5")

// depend on files using `fs(name, list of globs)`, returns the name of the target
go_files := fs("go_files", ["go.mod", "go.sum", "**/*.go"])

// create a target `register(name, list of deps, task func)`
register("go_download", [go_tc, go_files], func(bc){
    go_bin := bc.GetDep(go_tc) + "/go"

    sh('{go_bin} mod download')
})

build_all := []

for _, goos := range ["windows", "darwin", "linux"] {
    for _, goarch := range ["amd64", "arm64"] {
        name := 'build_{goos}_{goarch}'
        build_all.append(name)
        register(name, [go_tc, go_files, "go_download"], func(bc) {
            goos := goos
            goarch := goarch
            
            go_bin := bc.GetDep(go_tc) + "/go"

            // Put any outputs in bc.Out to cache them with yabs
            sh('GOOS={goos} GOARCH={goarch} {go_bin} build -o {bc.Out} .')
        })
    }
}

register("build_all", build_all, func(bc) {
    for _, build := range build_all {
        // direct dependencies' outputs are available at `bc.GetDep(target)``
        bin_loc := bc.GetDep(build)
        print(build, bin_loc)
    }
})