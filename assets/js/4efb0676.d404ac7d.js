"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[596],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),g=i,h=u["".concat(s,".").concat(g)]||u[g]||p[g]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2},a="Builtins & Types",l={unversionedId:"builtins-types",id:"builtins-types",title:"Builtins & Types",description:"Builtins",source:"@site/docs/builtins-types.md",sourceDirName:".",slug:"/builtins-types",permalink:"/docs/builtins-types",draft:!1,editUrl:"https://github.com/jakegut/yabs/tree/main/docs/docs/builtins-types.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/intro"},next:{title:"Examples",permalink:"/docs/examples"}},s={},d=[{value:"Builtins",id:"builtins",level:2},{value:"<code>register</code>",id:"register",level:3},{value:"<code>sh</code>",id:"sh",level:3},{value:"<code>go</code>",id:"go",level:3},{value:"<code>fs</code>",id:"fs",level:3},{value:"Types",id:"types",level:2},{value:"<code>BuildCtx</code>",id:"buildctx",level:2},{value:"<code>BuildCtx.Out</code>",id:"buildctxout",level:3},{value:"<code>BuildCtx.GetDep(target: string) string</code>",id:"buildctxgetdeptarget-string-string",level:3},{value:"Risor Features",id:"risor-features",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"builtins--types"},"Builtins & Types"),(0,i.kt)("h2",{id:"builtins"},"Builtins"),(0,i.kt)("h3",{id:"register"},(0,i.kt)("inlineCode",{parentName:"h3"},"register")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'/*\nregister(name: string, deps: []string, func(bc BuildCtx))\nname: of the target, used in deps list or when invoking directly `yabs <name>`\ndeps: list of strings by target name, these targets will be invoked before running the current target\nfunc: function to run when the target is invoked\n*/\nregister("name", ["any", "deps"], func(bc){\n    sh(\'echo "hello!"\')\n})\n')),(0,i.kt)("h3",{id:"sh"},(0,i.kt)("inlineCode",{parentName:"h3"},"sh")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'/*\nsh(cmd: string) []string | string | nil\ncmd: command to run in the shell, internally invokes exec("sh", "-c", cmd)\n    * the host\'s environment is inherited\nReturns based on stdout:\n    * []string for each line\n    * string if only one line\n    * nil if nothing\n*/\nsh(\'echo "run any command in here as if it was shell!"\')\n')),(0,i.kt)("h3",{id:"go"},(0,i.kt)("inlineCode",{parentName:"h3"},"go")),(0,i.kt)("p",null,"Download and install a ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," toolchain specified by the version. The toolchain will be download in the project's ",(0,i.kt)("inlineCode",{parentName:"p"},".yabs/go/<version>")," directory.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"GOROOT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GOPATH")," environment variables will be set to be within the ",(0,i.kt)("inlineCode",{parentName:"p"},".yabs/go")," directory. The ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH")," env var will be modified to include the toolchain's ",(0,i.kt)("inlineCode",{parentName:"p"},"bin")," directory, the ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH")," will be updated so that ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," will appear first."),(0,i.kt)("p",null,"While the ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH")," is modified, it will be good practice to get the path of the ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"gofmt")," binaries directory by using ",(0,i.kt)("inlineCode",{parentName:"p"},"BuildCtx.GetDep(target)"),". Especially if you're using multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," toolchains."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'/*\ngo(version: string) string\nreturns the name of the target to use a a dep (the version)\nthe `go` and `gofmt` binaries are available in its\' out directory\n*/\ngo_tc := go("1.20.7")\n\nregister("env", [go_tc], func(bc) {\n    sh(\'go env\')\n})\n')),(0,i.kt)("h3",{id:"fs"},(0,i.kt)("inlineCode",{parentName:"h3"},"fs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'/*\nfs(name: string, globs: []string) string\nDepend on a glob of files, returns the name of the target\nIts\' out directory will be a directory of hardlinks of matching files\nname: name of target\nglobs: a list of globs to depend on\n*/\nreadme := fs("readme", ["README.md"])\n\ngo_files := fs("go_files", ["go.mod", "go.sum", "**/*.go"])\n\nregister("cat", [readme], func(bc){\n    sh(\'cat bc.GetDep(readme)\')\n})\n\nregister("build", [go_files], func(bc) {\n    sh(\'go build -C bc.GetDep(go_files) -o {bc.Out} .\')\n})\n')),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("h2",{id:"buildctx"},(0,i.kt)("inlineCode",{parentName:"h2"},"BuildCtx")),(0,i.kt)("p",null,"This is the main type included and gives you access to the location of the output for the current target and a map of targets to outputs."),(0,i.kt)("h3",{id:"buildctxout"},(0,i.kt)("inlineCode",{parentName:"h3"},"BuildCtx.Out")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"/*\n`BuildCtx.Out` is the absolute path of where to store any outputs from the target, the output can be a file or a directory\nIf there's an output, it will be tracked by `yabs` and stored within the `.yabs/out` directory\n*/\nregister(\"build\", [], func(bc) {\n    sh('go build -o {bc.Out} .')\n})\n")),(0,i.kt)("h3",{id:"buildctxgetdeptarget-string-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"BuildCtx.GetDep(target: string) string")),(0,i.kt)("p",null,"Get the absolute path of a target's output. The target must be a direct dependency. If the target isn't there or there were no outputs, it will return an empty string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'register("hello", [], func(bc) {\n    sh(\'echo "hello" > {bc.Out}\')\n})\n\nregister("cat", ["hello"], func(bc) {\n    sh(\'cat {bc.GetDep("hello")}\')\n})\n')),(0,i.kt)("h2",{id:"risor-features"},"Risor Features"),(0,i.kt)("p",null,"There are a number of builtins, modules and types that are included, explore them at ",(0,i.kt)("a",{parentName:"p",href:"https://risor.io/docs"},"https://risor.io/docs"),"."))}p.isMDXComponent=!0}}]);